/*
msgsvc

msgsvc api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgsvcclientgo

import (
	"encoding/json"
)

// checks if the UploadData200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadData200Response{}

// UploadData200Response struct for UploadData200Response
type UploadData200Response struct {
	// The data ID
	DataId *string `json:"dataId,omitempty"`
}

// NewUploadData200Response instantiates a new UploadData200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadData200Response() *UploadData200Response {
	this := UploadData200Response{}
	return &this
}

// NewUploadData200ResponseWithDefaults instantiates a new UploadData200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadData200ResponseWithDefaults() *UploadData200Response {
	this := UploadData200Response{}
	return &this
}

// GetDataId returns the DataId field value if set, zero value otherwise.
func (o *UploadData200Response) GetDataId() string {
	if o == nil || IsNil(o.DataId) {
		var ret string
		return ret
	}
	return *o.DataId
}

// GetDataIdOk returns a tuple with the DataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadData200Response) GetDataIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataId) {
		return nil, false
	}
	return o.DataId, true
}

// HasDataId returns a boolean if a field has been set.
func (o *UploadData200Response) HasDataId() bool {
	if o != nil && !IsNil(o.DataId) {
		return true
	}

	return false
}

// SetDataId gets a reference to the given string and assigns it to the DataId field.
func (o *UploadData200Response) SetDataId(v string) {
	o.DataId = &v
}

func (o UploadData200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadData200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataId) {
		toSerialize["dataId"] = o.DataId
	}
	return toSerialize, nil
}

type NullableUploadData200Response struct {
	value *UploadData200Response
	isSet bool
}

func (v NullableUploadData200Response) Get() *UploadData200Response {
	return v.value
}

func (v *NullableUploadData200Response) Set(val *UploadData200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadData200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadData200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadData200Response(val *UploadData200Response) *NullableUploadData200Response {
	return &NullableUploadData200Response{value: val, isSet: true}
}

func (v NullableUploadData200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadData200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


