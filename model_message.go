/*
msgsvc

msgsvc api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgsvcclientgo

import (
	"encoding/json"
)

// checks if the Message type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Message{}

// Message struct for Message
type Message struct {
	// The user ID to whom the message is sent
	ToUser *string `json:"toUser,omitempty"`
	// The group ID to whom the message is sent
	ToGroup *string `json:"toGroup,omitempty"`
	// The message text
	Text *string `json:"text,omitempty"`
	// The data ID
	DataId *string `json:"dataId,omitempty"`
}

// NewMessage instantiates a new Message object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessage() *Message {
	this := Message{}
	return &this
}

// NewMessageWithDefaults instantiates a new Message object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageWithDefaults() *Message {
	this := Message{}
	return &this
}

// GetToUser returns the ToUser field value if set, zero value otherwise.
func (o *Message) GetToUser() string {
	if o == nil || IsNil(o.ToUser) {
		var ret string
		return ret
	}
	return *o.ToUser
}

// GetToUserOk returns a tuple with the ToUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetToUserOk() (*string, bool) {
	if o == nil || IsNil(o.ToUser) {
		return nil, false
	}
	return o.ToUser, true
}

// HasToUser returns a boolean if a field has been set.
func (o *Message) HasToUser() bool {
	if o != nil && !IsNil(o.ToUser) {
		return true
	}

	return false
}

// SetToUser gets a reference to the given string and assigns it to the ToUser field.
func (o *Message) SetToUser(v string) {
	o.ToUser = &v
}

// GetToGroup returns the ToGroup field value if set, zero value otherwise.
func (o *Message) GetToGroup() string {
	if o == nil || IsNil(o.ToGroup) {
		var ret string
		return ret
	}
	return *o.ToGroup
}

// GetToGroupOk returns a tuple with the ToGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetToGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ToGroup) {
		return nil, false
	}
	return o.ToGroup, true
}

// HasToGroup returns a boolean if a field has been set.
func (o *Message) HasToGroup() bool {
	if o != nil && !IsNil(o.ToGroup) {
		return true
	}

	return false
}

// SetToGroup gets a reference to the given string and assigns it to the ToGroup field.
func (o *Message) SetToGroup(v string) {
	o.ToGroup = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Message) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Message) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Message) SetText(v string) {
	o.Text = &v
}

// GetDataId returns the DataId field value if set, zero value otherwise.
func (o *Message) GetDataId() string {
	if o == nil || IsNil(o.DataId) {
		var ret string
		return ret
	}
	return *o.DataId
}

// GetDataIdOk returns a tuple with the DataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetDataIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataId) {
		return nil, false
	}
	return o.DataId, true
}

// HasDataId returns a boolean if a field has been set.
func (o *Message) HasDataId() bool {
	if o != nil && !IsNil(o.DataId) {
		return true
	}

	return false
}

// SetDataId gets a reference to the given string and assigns it to the DataId field.
func (o *Message) SetDataId(v string) {
	o.DataId = &v
}

func (o Message) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Message) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ToUser) {
		toSerialize["toUser"] = o.ToUser
	}
	if !IsNil(o.ToGroup) {
		toSerialize["toGroup"] = o.ToGroup
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.DataId) {
		toSerialize["dataId"] = o.DataId
	}
	return toSerialize, nil
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


